import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import Header from '../components/Header'
import MarkdownEditor from '../components/MarkdownEditor'
import EmployeeSelector from '../components/EmployeeSelector'

function NewProject() {
  const navigate = useNavigate()
  
  const [formData, setFormData] = useState({
    project_title: '',
    estimated_time: '',
    metadata: {
      description: '',
      company: '',
      department: '',
      year: new Date().getFullYear(),
      languages: []
    },
    project_description: '',
    possible_solution: ''
  })

  const [selectedEmployees, setSelectedEmployees] = useState([])
  const [languageInput, setLanguageInput] = useState('')

  const handleChange = (e) => {
    const { name, value } = e.target
    
    if (name.includes('.')) {
      const [parent, child] = name.split('.')
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }))
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }))
    }
  }

  const handleAddLanguage = () => {
    if (languageInput.trim() && !formData.metadata.languages.includes(languageInput.trim())) {
      setFormData(prev => ({
        ...prev,
        metadata: {
          ...prev.metadata,
          languages: [...prev.metadata.languages, languageInput.trim().toLowerCase()]
        }
      }))
      setLanguageInput('')
    }
  }

  const handleRemoveLanguage = (lang) => {
    setFormData(prev => ({
      ...prev,
      metadata: {
        ...prev.metadata,
        languages: prev.metadata.languages.filter(l => l !== lang)
      }
    }))
  }

  const generateJSON = () => {
    const projectData = {
      project_title: formData.project_title,
      index: 1, // This could be auto-incremented
      estimated_time: formData.estimated_time,
      metadata: {
        description: formData.metadata.description,
        company: formData.metadata.company,
        department: formData.metadata.department,
        year: parseInt(formData.metadata.year),
        languages: formData.metadata.languages
      },
      project_description: formData.project_description,
      possible_solution: formData.possible_solution,
      team: selectedEmployees,
      tasks: [] // Will be generated by AI
    }

    return projectData
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    
    const projectJSON = generateJSON()
    
    // Log the JSON for now (will be sent to API/AI later)
    console.log('Project JSON:', JSON.stringify(projectJSON, null, 2))
    
    // Show JSON in alert for demo purposes
    alert('Project JSON generated! Check console for details.\n\nIn production, this will be sent to AI to generate tasks.')
    
    // TODO: Send to API
    // await fetch('/api/projects', {
    //   method: 'POST',
    //   body: JSON.stringify(projectJSON)
    // })
    
    // Navigate back to dashboard
    // navigate('/pm')
  }

  const handlePreviewJSON = () => {
    const projectJSON = generateJSON()
    const jsonString = JSON.stringify(projectJSON, null, 2)
    
    // Create a modal or new window to show JSON
    const newWindow = window.open('', 'Project JSON', 'width=600,height=800')
    newWindow.document.write(`
      <html>
        <head>
          <title>Project JSON Preview</title>
          <style>
            body { 
              font-family: monospace; 
              padding: 20px; 
              background: #1e1e1e; 
              color: #d4d4d4;
            }
            pre { 
              background: #252526; 
              padding: 20px; 
              border-radius: 5px; 
              overflow: auto;
            }
            button {
              background: #0d6efd;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              cursor: pointer;
              margin-bottom: 10px;
            }
            button:hover {
              background: #0b5ed7;
            }
          </style>
        </head>
        <body>
          <button onclick="navigator.clipboard.writeText(document.querySelector('pre').textContent)">
            Copy to Clipboard
          </button>
          <pre>${jsonString}</pre>
        </body>
      </html>
    `)
  }

  return (
    <div>
      <Header 
        title="Create New Project" 
        onChangeRole={() => navigate('/')} 
      />
      
      <div className="container-fluid">
        <div className="row justify-content-center">
          <div className="col-lg-10 col-xl-8">
            <div className="card">
              <div className="card-body p-4">
                <form onSubmit={handleSubmit}>
                  {/* Basic Information */}
                  <h5 className="mb-3">Basic Information</h5>
                  
                  <div className="row mb-3">
                    <div className="col-md-8">
                      <label className="form-label">Project Title *</label>
                      <input
                        type="text"
                        className="form-control"
                        name="project_title"
                        value={formData.project_title}
                        onChange={handleChange}
                        placeholder="e.g., PlanLLaMA"
                        required
                      />
                    </div>
                    <div className="col-md-4">
                      <label className="form-label">Estimated Time *</label>
                      <input
                        type="text"
                        className="form-control"
                        name="estimated_time"
                        value={formData.estimated_time}
                        onChange={handleChange}
                        placeholder="e.g., P2D (ISO 8601)"
                        required
                      />
                      <small className="text-muted">ISO 8601 Duration (P2D = 2 days, P1M = 1 month)</small>
                    </div>
                  </div>

                  {/* Metadata */}
                  <h5 className="mb-3 mt-4">Metadata</h5>
                  
                  <div className="mb-3">
                    <label className="form-label">Short Description</label>
                    <input
                      type="text"
                      className="form-control"
                      name="metadata.description"
                      value={formData.metadata.description}
                      onChange={handleChange}
                      placeholder="e.g., Project Management UygulamasÄ±"
                    />
                  </div>

                  <div className="row mb-3">
                    <div className="col-md-4">
                      <label className="form-label">Company</label>
                      <input
                        type="text"
                        className="form-control"
                        name="metadata.company"
                        value={formData.metadata.company}
                        onChange={handleChange}
                        placeholder="e.g., CodeLLaMA"
                      />
                    </div>
                    <div className="col-md-4">
                      <label className="form-label">Department</label>
                      <input
                        type="text"
                        className="form-control"
                        name="metadata.department"
                        value={formData.metadata.department}
                        onChange={handleChange}
                        placeholder="e.g., AI Software R&D"
                      />
                    </div>
                    <div className="col-md-4">
                      <label className="form-label">Year</label>
                      <input
                        type="number"
                        className="form-control"
                        name="metadata.year"
                        value={formData.metadata.year}
                        onChange={handleChange}
                        min="2020"
                        max="2030"
                      />
                    </div>
                  </div>

                  <div className="mb-3">
                    <label className="form-label">Languages</label>
                    <div className="input-group mb-2">
                      <input
                        type="text"
                        className="form-control"
                        placeholder="Add language code (e.g., tr, en)"
                        value={languageInput}
                        onChange={(e) => setLanguageInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddLanguage())}
                      />
                      <button 
                        type="button" 
                        className="btn btn-outline-secondary"
                        onClick={handleAddLanguage}
                      >
                        Add
                      </button>
                    </div>
                    <div>
                      {formData.metadata.languages.map(lang => (
                        <span key={lang} className="badge bg-primary me-2 mb-2">
                          {lang}
                          <button
                            type="button"
                            className="btn-close btn-close-white ms-2"
                            style={{ fontSize: '0.6rem' }}
                            onClick={() => handleRemoveLanguage(lang)}
                          ></button>
                        </span>
                      ))}
                    </div>
                  </div>

                  {/* Project Description */}
                  <h5 className="mb-3 mt-4">Project Description *</h5>
                  <p className="text-muted small">
                    Describe your project in detail. This will be sent to AI to generate tasks.
                    You can also upload a PDF in the future.
                  </p>
                  <div className="mb-4">
                    <MarkdownEditor
                      value={formData.project_description}
                      onChange={(value) => setFormData(prev => ({ ...prev, project_description: value }))}
                      placeholder="Describe the project goals, requirements, and scope..."
                    />
                  </div>

                  {/* Possible Solution */}
                  <h5 className="mb-3 mt-4">Possible Solution (Optional)</h5>
                  <p className="text-muted small">
                    Describe potential technical solutions, architecture, or approaches.
                  </p>
                  <div className="mb-4">
                    <MarkdownEditor
                      value={formData.possible_solution}
                      onChange={(value) => setFormData(prev => ({ ...prev, possible_solution: value }))}
                      placeholder="Describe technical approach, architecture, tools to be used..."
                    />
                  </div>

                  {/* Team Members */}
                  <h5 className="mb-3 mt-4">Project Team</h5>
                  <div className="mb-4">
                    <EmployeeSelector
                      selectedEmployees={selectedEmployees}
                      onEmployeesChange={setSelectedEmployees}
                    />
                  </div>

                  {/* Action Buttons */}
                  <div className="d-flex gap-2 mt-4">
                    <button type="submit" className="btn btn-primary">
                      Create Project & Generate Tasks (AI)
                    </button>
                    <button 
                      type="button" 
                      className="btn btn-outline-secondary"
                      onClick={handlePreviewJSON}
                    >
                      Preview JSON
                    </button>
                    <button 
                      type="button" 
                      className="btn btn-outline-secondary"
                      onClick={() => navigate('/pm')}
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default NewProject
